import logging
import asyncio
from collections import deque
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
TOKEN = "7712233610:AAG-M040klfJ8QOscBEjT8pBHqus4J58BuI"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
ADMIN_IDS = {1180484154: "–î–µ–Ω–∏—Å", 723748072: "–§–µ–¥—è" , 864561515: "–¢–∞–Ω—è"}  # –°–ª–æ–≤–∞—Ä—å: {ID: "–ò–º—è"}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_SETTINGS = {
    admin_id: {
        "ticket_history": {},  # –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
        "ban_list": set()      # –õ–∏—á–Ω—ã–π –±–∞–Ω-–ª–∏—Å—Ç –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
    } for admin_id in ADMIN_IDS
}

# –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∞—Ç–Ω—ã—Ö —Å–ª–æ–≤
BLACKLISTED_WORDS = {"–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "—Å—É–∫–∞", "–±–ª—è—Ç—å", "–ø–∏–∑–¥–µ—Ü"}

# –û—Ç–ª–∞–¥–∫–∞
print("TOKEN:", TOKEN)
print("ADMIN_IDS:", ADMIN_IDS)

if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω!")

if not ADMIN_IDS:
    logging.warning("ADMIN_IDS –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –ø—É—Å—Ç. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –û—á–µ—Ä–µ–¥—å —Ç–∏–∫–µ—Ç–æ–≤
ticket_queue = deque()
ticket_counter = 0
ticket_data = {}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class FeedbackStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_admin_response = State()
    continuing_dialog = State()
    waiting_for_admin_assignment = State()

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
async def auto_close_ticket(ticket_id):
    await asyncio.sleep(3600)  # –ñ–¥–µ–º 1 —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥)
    if ticket_id in ticket_data:
        if ticket_id in ticket_queue:
            ticket_queue.remove(ticket_id)
        user_id = ticket_data[ticket_id]["user_id"]
        admin_id = ticket_data[ticket_id].get("assigned_admin")
        if admin_id and ticket_id in ADMIN_SETTINGS[admin_id]["ticket_history"]:
            ADMIN_SETTINGS[admin_id]["ticket_history"][ticket_id]["status"] = "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç"
        del ticket_data[ticket_id]
        try:
            home_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data="home")]
            ])
            await bot.send_message(
                chat_id=user_id,
                text=f"‚ÑπÔ∏è –¢–∏–∫–µ—Ç #{ticket_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.",
                reply_markup=home_keyboard
            )
            if admin_id:
                await bot.send_message(
                    chat_id=admin_id,
                    text=f"‚ÑπÔ∏è –¢–∏–∫–µ—Ç #{ticket_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ 1 —á–∞—Å–∞."
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ #{ticket_id}: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–Ω-–ª–∏—Å—Ç–µ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    for admin_id, settings in ADMIN_SETTINGS.items():
        if user_id in settings["ban_list"]:
            await message.reply("–í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì© –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="suggestion")],
        [InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤ –æ –ø—Ä–æ–µ–∫—Ç–µ", callback_data="feedback")],
        [InlineKeyboardButton(text="üìä –û—á–µ—Ä–µ–¥—å —Ç–∏–∫–µ—Ç–æ–≤", callback_data="check_queue")]
    ])
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
@dp.callback_query(lambda c: c.data == "home")
async def process_home(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    for admin_id, settings in ADMIN_SETTINGS.items():
        if user_id in settings["ban_list"]:
            await callback.answer("–í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.", show_alert=True)
            return

    await callback.answer()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì© –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="suggestion")],
        [InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤ –æ –ø—Ä–æ–µ–∫—Ç–µ", callback_data="feedback")],
        [InlineKeyboardButton(text="üìä –û—á–µ—Ä–µ–¥—å —Ç–∏–∫–µ—Ç–æ–≤", callback_data="check_queue")]
    ])
    await callback.message.edit_text("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é)
@dp.callback_query(lambda c: c.data in ["suggestion", "feedback", "check_queue"])
async def process_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    for admin_id, settings in ADMIN_SETTINGS.items():
        if user_id in settings["ban_list"]:
            await callback.answer("–í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.", show_alert=True)
            return

    await callback.answer()
    if callback.data == "check_queue":
        queue_size = len(ticket_queue)
        home_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data="home")]
        ])
        await callback.message.edit_text(f"–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å —Ç–∏–∫–µ—Ç–æ–≤: {queue_size}. –í–∞—à —Ç–∏–∫–µ—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏.", reply_markup=home_keyboard)
    else:
        feedback_type = callback.data
        await state.update_data(feedback_type=feedback_type)
        await callback.message.edit_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await state.set_state(FeedbackStates.waiting_for_message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(FeedbackStates.waiting_for_message)
async def handle_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    for admin_id, settings in ADMIN_SETTINGS.items():
        if user_id in settings["ban_list"]:
            await message.reply("–í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç–Ω—ã–µ —Å–ª–æ–≤–∞
    message_text = message.text.lower()
    if any(word in message_text for word in BLACKLISTED_WORDS):
        await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–Ω-–ª–∏—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É)
        first_admin = list(ADMIN_IDS.keys())[0]
        ADMIN_SETTINGS[first_admin]["ban_list"].add(user_id)
        await state.clear()
        return

    global ticket_counter
    ticket_counter += 1
    ticket_id = ticket_counter
    ticket_queue.append(ticket_id)
    ticket_data[ticket_id] = {
        "user_id": user_id,
        "message": message.text,
        "type": message.text.lower().startswith("–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ") and "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" or "–æ—Ç–∑—ã–≤",
        "created_at": datetime.now(),
        "assigned_admin": None
    }

    queue_position = len(ticket_queue)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–í–∑—è—Ç—å —Ç–∏–∫–µ—Ç ({ADMIN_IDS[admin_id]})", callback_data=f"assign_{ticket_id}_{admin_id}") for admin_id in ADMIN_IDS]
    ])
    admin_message = (
        f"üì© *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{ticket_id}*\n\n"
        f"üìå *–¢–∏–ø:* {ticket_data[ticket_id]['type']}\n"
        f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* {message.text}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:"
    )

    print(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. ADMIN_IDS: {ADMIN_IDS}")
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                parse_mode="Markdown",
                reply_markup=admin_keyboard
            )
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    await message.reply(f"‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –í–∞—à —Ç–∏–∫–µ—Ç #{ticket_id}. –í—ã {queue_position}-–π –≤ –æ—á–µ—Ä–µ–¥–∏.")
    await state.set_state(FeedbackStates.waiting_for_admin_assignment)

    asyncio.create_task(auto_close_ticket(ticket_id))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query(lambda c: c.data.startswith("assign_"))
async def process_admin_assignment(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    await callback.answer()
    _, ticket_id, admin_id = callback.data.split("_")
    ticket_id = int(ticket_id)
    admin_id = int(admin_id)

    if ticket_id not in ticket_data:
        await callback.message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if ticket_data[ticket_id]["assigned_admin"] is not None:
        await callback.message.reply("‚ö†Ô∏è –¢–∏–∫–µ—Ç —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    ticket_data[ticket_id]["assigned_admin"] = admin_id
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    ADMIN_SETTINGS[admin_id]["ticket_history"][ticket_id] = {
        "user_id": ticket_data[ticket_id]["user_id"],
        "messages": [(ticket_data[ticket_id]["message"], "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", datetime.now())],
        "status": "–æ—Ç–∫—Ä—ã—Ç"
    }

    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{ticket_id}")],
        [InlineKeyboardButton(text="üö´ –í —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data=f"block_{ticket_id}")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"admin_close_{ticket_id}")],
        [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–∞", callback_data=f"history_{ticket_id}")]
    ])
    admin_message = (
        f"üì© *–ó–∞—è–≤–∫–∞ #{ticket_id}*\n\n"
        f"üìå *–¢–∏–ø:* {ticket_data[ticket_id]['type']}\n"
        f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* {ticket_data[ticket_id]['message']}\n"
        f"üë®‚Äçüíº *–í–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É:* {ADMIN_IDS[admin_id]}"
    )

    for admin in ADMIN_IDS:
        try:
            if admin == admin_id:
                await bot.send_message(admin, admin_message, parse_mode="Markdown", reply_markup=admin_keyboard)
            else:
                await bot.send_message(admin, f"‚ÑπÔ∏è –¢–∏–∫–µ—Ç #{ticket_id} –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É {ADMIN_IDS[admin_id]}.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin}: {e}")

    await state.set_state(FeedbackStates.waiting_for_admin_response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query(lambda c: c.data.startswith("reply_") or c.data.startswith("block_") or c.data.startswith("admin_close_") or c.data.startswith("history_"))
async def process_reply_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    await callback.answer()
    action, ticket_id = callback.data.split("_", 1)
    ticket_id = int(ticket_id)
    admin_id = callback.from_user.id

    if ticket_id not in ticket_data and action != "history":
        await callback.message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if action == "block":
        user_id = ticket_data[ticket_id]["user_id"]
        ADMIN_SETTINGS[admin_id]["ban_list"].add(user_id)
        if ticket_id in ADMIN_SETTINGS[admin_id]["ticket_history"]:
            ADMIN_SETTINGS[admin_id]["ticket_history"][ticket_id]["status"] = "–∑–∞–∫—Ä—ã—Ç (–≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ)"
        await callback.message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
        if ticket_id in ticket_queue:
            ticket_queue.remove(ticket_id)
        del ticket_data[ticket_id]
    elif action == "reply":
        if ticket_data[ticket_id]["assigned_admin"] != admin_id:
            await callback.answer("–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç –≤–µ–¥–µ—Ç –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", show_alert=True)
            return
        await state.update_data(ticket_id=ticket_id)
        await callback.message.reply("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
        await state.set_state(FeedbackStates.waiting_for_admin_response)
    elif action == "admin_close":
        user_id = ticket_data[ticket_id]["user_id"]
        if ticket_id in ADMIN_SETTINGS[admin_id]["ticket_history"]:
            ADMIN_SETTINGS[admin_id]["ticket_history"][ticket_id]["status"] = "–∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        if ticket_id in ticket_queue:
            ticket_queue.remove(ticket_id)
        del ticket_data[ticket_id]
        home_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data="home")]
        ])
        await callback.message.reply(f"‚úÖ –¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç –≤–∞–º–∏.")
        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"‚ÑπÔ∏è –¢–∏–∫–µ—Ç #{ticket_id} –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=home_keyboard
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ #{ticket_id}: {e}")
    elif action == "history":
        if ticket_id not in ADMIN_SETTINGS[admin_id]["ticket_history"]:
            await callback.message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.")
            return
        history = ADMIN_SETTINGS[admin_id]["ticket_history"][ticket_id]
        history_text = f"üìú *–ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–∞ #{ticket_id}*\n\n"
        history_text += f"üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {ADMIN_IDS[admin_id]}\n"
        history_text += f"üìå –°—Ç–∞—Ç—É—Å: {history['status']}\n\n"
        history_text += "–°–æ–æ–±—â–µ–Ω–∏—è:\n"
        for msg, sender, timestamp in history["messages"]:
            history_text += f"[{timestamp}] {sender}: {msg}\n"
        home_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data="home")]
        ])
        await callback.message.reply(history_text, parse_mode="Markdown", reply_markup=home_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(lambda message: message.from_user.id in ADMIN_IDS)
async def admin_reply(message: types.Message, state: FSMContext):
    data = await state.get_data()
    ticket_id = data.get("ticket_id")
    admin_id = message.from_user.id

    if not ticket_id or ticket_id not in ticket_data:
        return

    if ticket_data[ticket_id]["assigned_admin"] != admin_id:
        await message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç –≤–µ–¥–µ—Ç –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return

    ticket = ticket_data[ticket_id]
    user_id = ticket["user_id"]
    admin_response = message.text
    ADMIN_SETTINGS[admin_id]["ticket_history"][ticket_id]["messages"].append((admin_response, f"–∞–¥–º–∏–Ω {ADMIN_IDS[admin_id]}", datetime.now()))

    try:
        continue_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"continue_{ticket_id}"),
             InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close_{ticket_id}")],
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data="home")]
        ])
        await bot.send_message(
            chat_id=user_id,
            text=f"üì¢ *–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}:*\n\n{admin_response}\n\n–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥.",
            parse_mode="Markdown",
            reply_markup=continue_keyboard
        )
        await message.reply(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥" –∏–ª–∏ "–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@dp.callback_query(lambda c: c.data.startswith("continue_") or c.data.startswith("close_"))
async def process_dialog_options(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    for admin_id, settings in ADMIN_SETTINGS.items():
        if user_id in settings["ban_list"]:
            await callback.answer("–í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥.", show_alert=True)
            return

    await callback.answer()
    action, ticket_id = callback.data.split("_", 1)
    ticket_id = int(ticket_id)

    if action == "continue":
        await state.update_data(prev_ticket_id=ticket_id)
        await callback.message.edit_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await state.set_state(FeedbackStates.continuing_dialog)
    elif action == "close":
        if ticket_id in ticket_data:
            if ticket_id in ticket_queue:
                ticket_queue.remove(ticket_id)
            admin_id = ticket_data[ticket_id]["assigned_admin"]
            if admin_id and ticket_id in ADMIN_SETTINGS[admin_id]["ticket_history"]:
                ADMIN_SETTINGS[admin_id]["ticket_history"][ticket_id]["status"] = "–∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            del ticket_data[ticket_id]
            home_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data="home")]
            ])
            await callback.message.edit_text(
                f"‚úÖ –¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
                reply_markup=home_keyboard
            )
            if admin_id:
                await bot.send_message(admin_id, f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç #{ticket_id}.")
        else:
            home_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data="home")]
            ])
            await callback.message.edit_text("‚ö†Ô∏è –¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=home_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
@dp.message(FeedbackStates.continuing_dialog)
async def handle_continue_dialog(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    for admin_id, settings in ADMIN_SETTINGS.items():
        if user_id in settings["ban_list"]:
            await message.reply("–í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥.")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç–Ω—ã–µ —Å–ª–æ–≤–∞
    message_text = message.text.lower()
    if any(word in message_text for word in BLACKLISTED_WORDS):
        await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        first_admin = list(ADMIN_IDS.keys())[0]
        ADMIN_SETTINGS[first_admin]["ban_list"].add(user_id)
        await state.clear()
        return

    global ticket_counter
    data = await state.get_data()
    prev_ticket_id = data.get("prev_ticket_id")

    ticket_counter += 1
    ticket_id = ticket_counter
    ticket_queue.append(ticket_id)
    assigned_admin = ticket_data.get(prev_ticket_id, {}).get("assigned_admin")
    ticket_data[ticket_id] = {
        "user_id": user_id,
        "message": message.text,
        "type": "–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞",
        "created_at": datetime.now(),
        "assigned_admin": assigned_admin
    }
    if assigned_admin:
        ADMIN_SETTINGS[assigned_admin]["ticket_history"][ticket_id] = {
            "user_id": user_id,
            "messages": [(message.text, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", datetime.now())],
            "status": "–æ—Ç–∫—Ä—ã—Ç"
        }

    queue_position = len(ticket_queue)

    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{ticket_id}")],
        [InlineKeyboardButton(text="üö´ –í —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data=f"block_{ticket_id}")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"admin_close_{ticket_id}")],
        [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–∞", callback_data=f"history_{ticket_id}")]
    ])
    admin_message = (
        f"üì© *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{ticket_id} (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ #{prev_ticket_id})*\n\n"
        f"üìå *–¢–∏–ø:* –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞\n"
        f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* {message.text}"
    )

    if assigned_admin:
        try:
            await bot.send_message(
                chat_id=assigned_admin,
                text=admin_message,
                parse_mode="Markdown",
                reply_markup=admin_keyboard
            )
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {assigned_admin}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {assigned_admin}: {e}")

    await message.reply(f"‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –í–∞—à —Ç–∏–∫–µ—Ç #{ticket_id}. –í—ã {queue_position}-–π –≤ –æ—á–µ—Ä–µ–¥–∏.")
    await state.set_state(FeedbackStates.waiting_for_admin_response)

    asyncio.create_task(auto_close_ticket(ticket_id))

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram ID
@dp.message(Command("id"))
async def get_id(message: types.Message):
    await message.reply(f"–í–∞—à Telegram ID: {message.from_user.id}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("unblock"))
async def unblock_user(message: types.Message):
    admin_id = message.from_user.id
    if admin_id not in ADMIN_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        user_id = int(message.text.split()[1])
        if user_id in ADMIN_SETTINGS[admin_id]["ban_list"]:
            ADMIN_SETTINGS[admin_id]["ban_list"].remove(user_id)
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        else:
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–µ–º —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
    except (IndexError, ValueError):
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /unblock <user_id>")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())